name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Add workflow permissions
permissions:
  contents: read
  actions: read
  checks: write

env:
  NODE_VERSION: '18'
  CACHE_DEPENDENCY_PATH: '**/package-lock.json'

jobs:
  # Dependency and Security Scanning
  security:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: npm audit --audit-level=high --dry-run

  # Linting and Code Quality
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm run install:all

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

  # TypeScript Compilation
  typecheck:
    name: TypeScript Compilation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm run install:all

      - name: Type check all packages
        run: |
          npm run build --workspace=packages/shared
          npm run typecheck --workspace=packages/web --if-present
          npm run build --workspace=packages/api
          npm run build --workspace=packages/orchestrator

  # Unit Testing
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [shared, web, api, orchestrator]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm run install:all

      - name: Run tests for ${{ matrix.package }}
        run: npm run test --workspace=packages/${{ matrix.package }} --if-present
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.package == 'shared'
        with:
          directory: packages/${{ matrix.package }}/coverage
          flags: ${{ matrix.package }}

  # Integration Testing
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    # Skip in development environment when no infrastructure is deployed
    if: ${{ !contains(github.event.head_commit.message, '[skip integration]') }}
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm run install:all

      - name: Build packages
        run: npm run build

      - name: Run integration tests
        run: npm run test:integration --if-present
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        continue-on-error: true  # Allow failure in development

  # Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    strategy:
      matrix:
        package: [web, api, orchestrator, infrastructure]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm run install:all

      - name: Build ${{ matrix.package }}
        run: npm run build --workspace=packages/${{ matrix.package }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.package }}
          path: packages/${{ matrix.package }}/dist/
          retention-days: 1

  # E2E Testing (only for web package)
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    # Skip E2E tests if integration was skipped or if in development
    if: ${{ !contains(github.event.head_commit.message, '[skip e2e]') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm run install:all

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-web
          path: packages/web/dist/
        continue-on-error: true

      - name: Download API build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-api
          path: packages/api/dist/
        continue-on-error: true

      - name: Run E2E tests
        run: npm run test:e2e --workspace=packages/web --if-present
        env:
          NODE_ENV: test
        continue-on-error: true  # Allow failure in development

  # Final validation
  validate:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [security, lint, typecheck, test, integration, build, e2e]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          # Core jobs that must pass
          if [[ "${{ needs.security.result }}" != "success" || \
                "${{ needs.lint.result }}" != "success" || \
                "${{ needs.typecheck.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.build.result }}" != "success" ]]; then
            echo "Core validation jobs failed"
            exit 1
          fi
          
          # Optional jobs that can be skipped in development
          integration_result="${{ needs.integration.result }}"
          e2e_result="${{ needs.e2e.result }}"
          
          if [[ "$integration_result" == "failure" && "$e2e_result" == "failure" ]]; then
            echo "Warning: Integration and E2E tests failed - this may be expected in development environment"
            echo "Core validations (security, lint, typecheck, test, build) passed successfully"
          elif [[ "$integration_result" == "failure" ]]; then
            echo "Warning: Integration tests failed - this may be expected in development environment"
            echo "Core validations passed successfully"
          elif [[ "$e2e_result" == "failure" ]]; then
            echo "Warning: E2E tests failed - this may be expected in development environment"  
            echo "Core validations passed successfully"
          else
            echo "All validations passed!"
          fi