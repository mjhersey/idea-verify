name: Deploy Services

on:
  push:
    branches:
      - main
    paths:
      - 'packages/api/**'
      - 'packages/orchestrator/**'
      - 'packages/web/**'
      - 'packages/shared/**'
      - '.github/workflows/deploy-services.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      service:
        description: 'Service to deploy (all, api, orchestrator, web)'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - api
          - orchestrator
          - web

permissions:
  id-token: write   # Required for OIDC authentication
  contents: read    # Required to checkout code

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'

jobs:
  test-services:
    name: Test Services
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          npm run lint --workspace=@ai-validation/api
          npm run lint --workspace=@ai-validation/orchestrator
          npm run lint --workspace=@ai-validation/web

      - name: Run unit tests
        run: |
          npm test --workspace=@ai-validation/api
          npm test --workspace=@ai-validation/orchestrator
          npm test --workspace=@ai-validation/web

      - name: Build services
        run: |
          npm run build --workspace=@ai-validation/shared
          npm run build --workspace=@ai-validation/api
          npm run build --workspace=@ai-validation/orchestrator
          npm run build --workspace=@ai-validation/web

  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test-services
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [api, orchestrator, web]
        environment: [dev]  # Add staging/prod as needed
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR repository URI
        id: get-repo-uri
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          SERVICE: ${{ matrix.service }}
        run: |
          REPO_URI=$(aws ecr describe-repositories --repository-names "ai-validation-${SERVICE}-${ENVIRONMENT}" --query 'repositories[0].repositoryUri' --output text)
          echo "repo-uri=${REPO_URI}" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_URI: ${{ steps.get-repo-uri.outputs.repo-uri }}
          IMAGE_TAG: ${{ github.sha }}
          SERVICE: ${{ matrix.service }}
        run: |
          # Build image
          docker build -f packages/${SERVICE}/Dockerfile -t ${ECR_REPOSITORY_URI}:${IMAGE_TAG} -t ${ECR_REPOSITORY_URI}:latest .
          
          # Push both tags
          docker push ${ECR_REPOSITORY_URI}:${IMAGE_TAG}
          docker push ${ECR_REPOSITORY_URI}:latest

      - name: Update ECS service
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          SERVICE: ${{ matrix.service }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Get cluster name
          CLUSTER_NAME="ai-validation-${ENVIRONMENT}"
          SERVICE_NAME="ai-validation-${SERVICE}-${ENVIRONMENT}"
          
          # Force new deployment with latest image
          aws ecs update-service \
            --cluster ${CLUSTER_NAME} \
            --service ${SERVICE_NAME} \
            --force-new-deployment \
            --no-cli-pager

          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster ${CLUSTER_NAME} \
            --services ${SERVICE_NAME}

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push-images
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'dev'
    environment: development
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run database migrations
        run: |
          # Get the API task definition ARN
          CLUSTER_NAME="ai-validation-dev"
          TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster ${CLUSTER_NAME} \
            --services "ai-validation-api-dev" \
            --query 'services[0].taskDefinition' \
            --output text)
          
          # Get VPC configuration from the service
          VPC_CONFIG=$(aws ecs describe-services \
            --cluster ${CLUSTER_NAME} \
            --services "ai-validation-api-dev" \
            --query 'services[0].networkConfiguration.awsvpcConfiguration' \
            --output json)
          
          # Run migration task
          aws ecs run-task \
            --cluster ${CLUSTER_NAME} \
            --task-definition ${TASK_DEF_ARN} \
            --network-configuration "awsvpcConfiguration=${VPC_CONFIG}" \
            --overrides '{
              "containerOverrides": [{
                "name": "ApiContainer",
                "command": ["node", "packages/api/src/database/migrations.js"]
              }]
            }' \
            --launch-type FARGATE

      - name: Verify deployment
        run: |
          # Get load balancer DNS name
          LB_DNS=$(aws elbv2 describe-load-balancers \
            --names "AiValidationEcsDev-ApplicationLoadBalancer" \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          
          # Wait for services to be healthy
          echo "Waiting for services to be healthy..."
          sleep 60
          
          # Test API health endpoint
          curl -f "http://${LB_DNS}/api/health" || exit 1
          
          # Test web health endpoint
          curl -f "http://${LB_DNS}/health" || exit 1
          
          echo "âœ… All services are healthy!"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push-images
    if: github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Similar deployment steps as dev but for staging

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push-images
    if: github.event.inputs.environment == 'prod'
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy with blue-green strategy
        run: |
          echo "Deploying to production with blue-green deployment..."
          # Blue-green deployment logic for production