name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      component:
        description: 'Infrastructure component to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - parameters
          - infrastructure
          - ecs
          - monitoring
          - security
      force_deploy:
        description: 'Force deployment (skip drift detection)'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip post-deployment tests'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
    paths:
      - 'packages/infrastructure/**'
      - '.github/workflows/deploy-infrastructure.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'packages/infrastructure/**'

permissions:
  id-token: write
  contents: read
  deployments: write
  actions: read

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'

jobs:
  test-infrastructure:
    name: Test Infrastructure Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run infrastructure tests
        run: npm test --workspace=@ai-validation/infrastructure

      - name: Build infrastructure
        run: npm run build --workspace=@ai-validation/infrastructure

      - name: CDK synth check
        run: |
          cd packages/infrastructure
          npx cdk synth --all --quiet
        env:
          CDK_DEFAULT_ACCOUNT: '123456789012'  # Placeholder for synth

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: test-infrastructure
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'dev'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check AWS credentials availability
        id: check-aws
        run: |
          if [ -z "${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}" ]; then
            echo "aws-available=false" >> $GITHUB_OUTPUT
            echo "AWS credentials not configured for development environment"
          else
            echo "aws-available=true" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        if: steps.check-aws.outputs.aws-available == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build infrastructure
        run: npm run build --workspace=@ai-validation/infrastructure

      - name: Skip deployment message
        if: steps.check-aws.outputs.aws-available == 'false'
        run: |
          echo "⚠️ Skipping AWS deployment - credentials not configured for development environment"
          echo "This is expected in development/local environments"
          echo "✅ Infrastructure code validated successfully"

      - name: CDK Bootstrap (if needed)
        if: steps.check-aws.outputs.aws-available == 'true'
        run: |
          cd packages/infrastructure
          npx cdk bootstrap --context @aws-cdk/core:newStyleStackSynthesis=true
        continue-on-error: true

      - name: Deploy infrastructure stack
        if: steps.check-aws.outputs.aws-available == 'true'
        run: |
          cd packages/infrastructure
          npx cdk deploy AiValidationPlatformDev --require-approval never --progress events

      - name: Deploy ECS stack
        if: steps.check-aws.outputs.aws-available == 'true'
        run: |
          cd packages/infrastructure
          npx cdk deploy AiValidationEcsDev --require-approval never --progress events

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test-infrastructure
    if: github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build infrastructure
        run: npm run build --workspace=@ai-validation/infrastructure

      - name: CDK Bootstrap (if needed)
        run: |
          cd packages/infrastructure
          npx cdk bootstrap --context @aws-cdk/core:newStyleStackSynthesis=true
        continue-on-error: true

      - name: Deploy infrastructure stack
        run: |
          cd packages/infrastructure
          npx cdk deploy AiValidationPlatformStaging --require-approval never --progress events

      - name: Deploy ECS stack
        run: |
          cd packages/infrastructure
          npx cdk deploy AiValidationEcsStaging --require-approval never --progress events

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-infrastructure]
    if: github.event.inputs.environment == 'prod'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build infrastructure
        run: npm run build --workspace=@ai-validation/infrastructure

      - name: CDK Bootstrap (if needed)
        run: |
          cd packages/infrastructure
          npx cdk bootstrap --context @aws-cdk/core:newStyleStackSynthesis=true
        continue-on-error: true

      - name: Deploy infrastructure stack
        run: |
          cd packages/infrastructure
          npx cdk deploy AiValidationPlatformProd --require-approval never --progress events

      - name: Deploy ECS stack
        run: |
          cd packages/infrastructure
          npx cdk deploy AiValidationEcsProd --require-approval never --progress events