// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with authentication fields
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password_hash String
  name          String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  business_ideas BusinessIdea[]

  @@map("users")
  @@index([email])
  @@index([created_at])
}

// BusinessIdea model with evaluation fields
model BusinessIdea {
  id          String   @id @default(uuid())
  user_id     String
  title       String
  description String   // FR1: 50-5000 characters
  status      String   @default("draft") // draft, submitted, evaluating, completed
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  evaluations Evaluation[]

  @@map("business_ideas")
  @@index([user_id])
  @@index([status])
  @@index([created_at])
}

// Evaluation model for agent orchestration
model Evaluation {
  id               String    @id @default(uuid())
  business_idea_id String
  status           String    @default("pending") // pending, analyzing, completed, failed
  priority         String    @default("normal") // low, normal, high
  started_at       DateTime?
  completed_at     DateTime?
  results          Json?     // Final aggregated results
  error_message    String?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  // Relations
  business_idea BusinessIdea    @relation(fields: [business_idea_id], references: [id], onDelete: Cascade)
  agent_results AgentResult[]

  @@map("evaluations")
  @@index([business_idea_id])
  @@index([status])
  @@index([priority])
  @@index([created_at])
}

// AgentResult model for individual agent outputs
model AgentResult {
  id            String    @id @default(uuid())
  evaluation_id String
  agent_type    String    // market-research, competitive-analysis, customer-research, etc.
  status        String    @default("pending") // pending, running, completed, failed
  input_data    Json?     // Agent input parameters
  output_data   Json?     // Agent analysis results
  score         Float?    // 0-100 scoring
  insights      Json?     // Key insights and recommendations
  started_at    DateTime?
  completed_at  DateTime?
  error_message String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  evaluation Evaluation @relation(fields: [evaluation_id], references: [id], onDelete: Cascade)

  @@map("agent_results")
  @@index([evaluation_id])
  @@index([agent_type])
  @@index([status])
  @@index([created_at])
}
